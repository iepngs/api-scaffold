name: Build and Release

on:
  push:
    branches: [ main ]
    tags-ignore: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai

    steps:
    - name: Install UPX
      run: |
        sudo apt-get update
        sudo apt-get install -y upx
        
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: true
        
    - name: Set SSH remote
      run: git remote set-url origin git@github.com:${{ github.repository }}.git

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.0'

    - name: Generate semantic version
      id: version
      run: |
        # 获取全部远程标签
        git fetch --tags --force
        
        # 获取最新语义化版本标签（排除非标准标签）
        latest_tag=$(git tag -l "v*" --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -1 || echo "v0.0.0")
        
        # 自动递增修订号（兼容非标准标签情况）
        new_tag=$(echo $latest_tag | awk -F. '{
          if ($3 ~ /^[0-9]+$/) { $3++; }
          else { $3=0; }
          print $1"."$2"."$3
        }')
        
        build_time=$(date +"%Y%m%d%H%M%S")
        full_version="${new_tag}-${build_time}"
        
        echo "Latest detected tag: $latest_tag"
        echo "Generated new tag: $new_tag"
        echo "Full version: $full_version"
        echo "tag=$new_tag" >> $GITHUB_OUTPUT
        echo "full_version=$full_version" >> $GITHUB_OUTPUT

    - name: Create and push tag
      run: |
        if git rev-parse -q --verify "refs/tags/${{ steps.version.outputs.tag }}"; then
          echo "Error: Tag ${{ steps.version.outputs.tag }} already exists!"
          exit 1
        fi
        
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git tag "${{ steps.version.outputs.tag }}"
        
        # 重试机制（应对网络问题）
        for i in {1..3}; do
          git push origin "${{ steps.version.outputs.tag }}" && break || sleep 5
        done

    - name: Build binaries
      run: |
        mkdir -p bin
        platforms=(
          "linux amd64"
          "darwin amd64"
          "darwin arm64"
          "windows amd64 .exe"
        )
        
        for platform in "${platforms[@]}"; do
          read -r os arch suffix <<<"$platform"
          output="bin/${{ github.event.repository.name }}-${os}-${arch}${suffix}"
          
          echo "Building for ${os}/${arch}..."
          CGO_ENABLED=0 GOOS=$os GOARCH=$arch \
            go build -ldflags "-X 'main.version=${{ steps.version.outputs.full_version }}'" \
            -o "$output" cmd/*
            
          if [ "$os" = "darwin" ]; then
            upx --force-macos "$output"
          else
            upx "$output"
          fi
        done
        
        ls -lh bin/

    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Release ${{ steps.version.outputs.full_version }}
        body: |
          ### 构建详情
          - **版本**: ${{ steps.version.outputs.full_version }}
          - **提交**: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          - **触发事件**: ${{ github.event_name }}

          ### 变更说明
          ${{ github.event.head_commit.message }}
        draft: true
        prerelease: false

    - name: Verify built files
      run: |
        if [ ! -d "bin" ]; then
          echo "Error: bin/ directory not found!"
          exit 1
        fi
        
        echo "Built files:"
        ls -lh bin/
        
        if ! compgen -G "bin/api-scaffold-*" > /dev/null; then
          echo "Error: No files matching 'bin/api-scaffold-*'"
          exit 1
        fi

    - name: Upload Assets
      run: |
        UPLOAD_BASE_URL=$(echo "${{ steps.create_release.outputs.upload_url }}" | cut -d '{' -f 1)
        
        for file in bin/api-scaffold-*; do
          if [ -f "$file" ]; then
            echo "➡ Uploading $(basename "$file")"
            
            curl -sS \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: $(file -b --mime-type "$file")" \
              -H "Accept: application/vnd.github.v3+json" \
              --data-binary @"$file" \
              "${UPLOAD_BASE_URL}?name=$(basename "$file")"
          fi
        done
